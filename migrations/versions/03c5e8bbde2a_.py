"""empty message

Revision ID: 03c5e8bbde2a
Revises: None
Create Date: 2021-05-12 06:28:00.803536

"""

# revision identifiers, used by Alembic.
revision = '03c5e8bbde2a'
down_revision = None

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('team',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.Unicode(length=50), nullable=True),
    sa.Column('creation_date', sa.DateTime(), nullable=True),
    sa.Column('update_date', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    sa.UniqueConstraint('name')
    )
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.Unicode(length=50), nullable=True),
    sa.Column('email', sa.Unicode(length=120), nullable=True),
    sa.Column('password', sa.Unicode(length=120), nullable=True),
    sa.Column('authenticated', sa.Boolean(), nullable=True),
    sa.Column('anonymous', sa.Boolean(), nullable=True),
    sa.Column('active', sa.Boolean(), nullable=True),
    sa.Column('confirmed', sa.Boolean(), nullable=True),
    sa.Column('confirmed_on', sa.DateTime(), nullable=True),
    sa.Column('api_key', sa.Unicode(length=2000), nullable=True),
    sa.Column('status', sa.Unicode(length=20), nullable=True),
    sa.Column('creation_date', sa.DateTime(), nullable=True),
    sa.Column('update_date', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('username'),
    sa.UniqueConstraint('username')
    )
    op.create_table('project',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.Unicode(length=250), nullable=True),
    sa.Column('description', sa.Unicode(length=2000), nullable=True),
    sa.Column('topics', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('preloaded', sa.Boolean(), nullable=True),
    sa.Column('directory', sa.Unicode(length=2000), nullable=True),
    sa.Column('private', sa.Boolean(), nullable=True),
    sa.Column('anonymous', sa.Boolean(), nullable=True),
    sa.Column('starred', sa.Boolean(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('creation_date', sa.DateTime(), nullable=True),
    sa.Column('update_date', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_project_user_id'), 'project', ['user_id'], unique=False)
    op.create_table('team_admin_association',
    sa.Column('team_id', sa.Integer(), nullable=True),
    sa.Column('admin_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['admin_id'], ['user.id'], ),
    sa.ForeignKeyConstraint(['team_id'], ['team.id'], )
    )
    op.create_table('team_user_association',
    sa.Column('team_id', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['team_id'], ['team.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], )
    )
    op.create_table('aggregation',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('spec', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('conditionals', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('project_id', sa.Integer(), nullable=True),
    sa.Column('creation_date', sa.DateTime(), nullable=True),
    sa.Column('update_date', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_aggregation_project_id'), 'aggregation', ['project_id'], unique=False)
    op.create_table('comparison',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('spec', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('conditionals', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('project_id', sa.Integer(), nullable=True),
    sa.Column('creation_date', sa.DateTime(), nullable=True),
    sa.Column('update_date', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_comparison_project_id'), 'comparison', ['project_id'], unique=False)
    op.create_table('correlation',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('spec', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('conditionals', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('project_id', sa.Integer(), nullable=True),
    sa.Column('creation_date', sa.DateTime(), nullable=True),
    sa.Column('update_date', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_correlation_project_id'), 'correlation', ['project_id'], unique=False)
    op.create_table('dataset',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.Unicode(length=250), nullable=True),
    sa.Column('description', sa.Unicode(), nullable=True),
    sa.Column('preloaded', sa.Boolean(), nullable=True),
    sa.Column('storage_type', sa.Unicode(length=10), nullable=True),
    sa.Column('offset', sa.Integer(), nullable=True),
    sa.Column('dialect', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('encoding', sa.Unicode(length=250), nullable=True),
    sa.Column('path', sa.Unicode(length=250), nullable=True),
    sa.Column('file_name', sa.Unicode(length=250), nullable=True),
    sa.Column('type', sa.Unicode(length=250), nullable=True),
    sa.Column('orig_type', sa.Unicode(length=250), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('info_url', sa.Unicode(length=250), nullable=True),
    sa.Column('project_id', sa.Integer(), nullable=True),
    sa.Column('creation_date', sa.DateTime(), nullable=True),
    sa.Column('update_date', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_dataset_project_id'), 'dataset', ['project_id'], unique=False)
    op.create_table('document',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.Unicode(length=250), nullable=True),
    sa.Column('content', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('project_id', sa.Integer(), nullable=True),
    sa.Column('creation_date', sa.DateTime(), nullable=True),
    sa.Column('update_date', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_document_project_id'), 'document', ['project_id'], unique=False)
    op.create_table('feedback',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('feedback_type', sa.Unicode(length=250), nullable=True),
    sa.Column('description', sa.Unicode(length=2000), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('user_email', sa.Unicode(length=50), nullable=True),
    sa.Column('user_username', sa.Unicode(length=50), nullable=True),
    sa.Column('path', sa.Unicode(length=250), nullable=True),
    sa.Column('project_id', sa.Integer(), nullable=True),
    sa.Column('creation_date', sa.DateTime(), nullable=True),
    sa.Column('update_date', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_feedback_project_id'), 'feedback', ['project_id'], unique=False)
    op.create_table('regression',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('spec', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('conditionals', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('project_id', sa.Integer(), nullable=True),
    sa.Column('creation_date', sa.DateTime(), nullable=True),
    sa.Column('update_date', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_regression_project_id'), 'regression', ['project_id'], unique=False)
    op.create_table('dataset_properties',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('n_rows', sa.Integer(), nullable=True),
    sa.Column('n_cols', sa.Integer(), nullable=True),
    sa.Column('field_names', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('field_types', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('field_accessors', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('is_time_series', sa.Boolean(), nullable=True),
    sa.Column('dataset_id', sa.Integer(), nullable=True),
    sa.Column('project_id', sa.Integer(), nullable=True),
    sa.Column('creation_date', sa.DateTime(), nullable=True),
    sa.Column('update_date', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['dataset_id'], ['dataset.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_dataset_properties_dataset_id'), 'dataset_properties', ['dataset_id'], unique=False)
    op.create_index(op.f('ix_dataset_properties_project_id'), 'dataset_properties', ['project_id'], unique=False)
    op.create_table('exported_aggregation',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('conditionals', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('aggregation_id', sa.Integer(), nullable=True),
    sa.Column('project_id', sa.Integer(), nullable=True),
    sa.Column('creation_date', sa.DateTime(), nullable=True),
    sa.Column('update_date', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['aggregation_id'], ['aggregation.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_exported_aggregation_project_id'), 'exported_aggregation', ['project_id'], unique=False)
    op.create_table('exported_comparison',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('conditionals', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('comparison_id', sa.Integer(), nullable=True),
    sa.Column('project_id', sa.Integer(), nullable=True),
    sa.Column('creation_date', sa.DateTime(), nullable=True),
    sa.Column('update_date', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['comparison_id'], ['comparison.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_exported_comparison_project_id'), 'exported_comparison', ['project_id'], unique=False)
    op.create_table('exported_correlation',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('conditionals', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('correlation_id', sa.Integer(), nullable=True),
    sa.Column('project_id', sa.Integer(), nullable=True),
    sa.Column('creation_date', sa.DateTime(), nullable=True),
    sa.Column('update_date', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['correlation_id'], ['correlation.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_exported_correlation_project_id'), 'exported_correlation', ['project_id'], unique=False)
    op.create_table('exported_regression',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('conditionals', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('regression_id', sa.Integer(), nullable=True),
    sa.Column('project_id', sa.Integer(), nullable=True),
    sa.Column('creation_date', sa.DateTime(), nullable=True),
    sa.Column('update_date', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['regression_id'], ['regression.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_exported_regression_project_id'), 'exported_regression', ['project_id'], unique=False)
    op.create_table('field_properties',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.Unicode(length=250), nullable=True),
    sa.Column('type', sa.Unicode(length=250), nullable=True),
    sa.Column('scale', sa.Unicode(length=250), nullable=True),
    sa.Column('general_type', sa.Unicode(length=250), nullable=True),
    sa.Column('color', sa.Unicode(length=250), nullable=True),
    sa.Column('type_scores', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('index', sa.Integer(), nullable=True),
    sa.Column('normality', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('num_na', sa.Unicode(length=250), nullable=True),
    sa.Column('contiguous', sa.Boolean(), nullable=True),
    sa.Column('is_unique', sa.Boolean(), nullable=True),
    sa.Column('is_id', sa.Boolean(), nullable=True),
    sa.Column('unique_values', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('parents', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('children', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('one_to_ones', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('viz_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('stats', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('manual', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('dataset_id', sa.Integer(), nullable=True),
    sa.Column('project_id', sa.Integer(), nullable=True),
    sa.Column('creation_date', sa.DateTime(), nullable=True),
    sa.Column('update_date', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['dataset_id'], ['dataset.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_field_properties_dataset_id'), 'field_properties', ['dataset_id'], unique=False)
    op.create_index(op.f('ix_field_properties_project_id'), 'field_properties', ['project_id'], unique=False)
    op.create_table('interaction_term',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('variables', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('names', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('project_id', sa.Integer(), nullable=True),
    sa.Column('dataset_id', sa.Integer(), nullable=True),
    sa.Column('creation_date', sa.DateTime(), nullable=True),
    sa.Column('update_date', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['dataset_id'], ['dataset.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_interaction_term_dataset_id'), 'interaction_term', ['dataset_id'], unique=False)
    op.create_index(op.f('ix_interaction_term_project_id'), 'interaction_term', ['project_id'], unique=False)
    op.create_table('project_preloaded_dataset_association',
    sa.Column('project_preloaded_dataset_id', sa.Integer(), nullable=False),
    sa.Column('project_id', sa.Integer(), nullable=True),
    sa.Column('preloaded_dataset_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['preloaded_dataset_id'], ['dataset.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.PrimaryKeyConstraint('project_preloaded_dataset_id')
    )
    op.create_table('spec',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('case', sa.Unicode(length=250), nullable=True),
    sa.Column('generating_procedure', sa.Unicode(length=250), nullable=True),
    sa.Column('type_structure', sa.Unicode(length=250), nullable=True),
    sa.Column('recommendation_type', sa.Unicode(length=20), nullable=True),
    sa.Column('recommendation_types', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('viz_types', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('args', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('meta', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('scores', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('field_ids', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('selected_fields', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('conditionals', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('dataset_id', sa.Integer(), nullable=True),
    sa.Column('project_id', sa.Integer(), nullable=True),
    sa.Column('creation_date', sa.DateTime(), nullable=True),
    sa.Column('update_date', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['dataset_id'], ['dataset.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_spec_dataset_id'), 'spec', ['dataset_id'], unique=False)
    op.create_index(op.f('ix_spec_project_id'), 'spec', ['project_id'], unique=False)
    op.create_table('exported_spec',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('conditionals', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('spec_id', sa.Integer(), nullable=True),
    sa.Column('project_id', sa.Integer(), nullable=True),
    sa.Column('creation_date', sa.DateTime(), nullable=True),
    sa.Column('update_date', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['spec_id'], ['spec.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_exported_spec_project_id'), 'exported_spec', ['project_id'], unique=False)
    op.create_index(op.f('ix_exported_spec_spec_id'), 'exported_spec', ['spec_id'], unique=False)
    op.create_table('relationship',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('source_dataset_id', sa.Integer(), nullable=True),
    sa.Column('source_field_id', sa.Integer(), nullable=True),
    sa.Column('target_dataset_id', sa.Integer(), nullable=True),
    sa.Column('target_field_id', sa.Integer(), nullable=True),
    sa.Column('source_dataset_name', sa.Unicode(length=250), nullable=True),
    sa.Column('source_field_name', sa.Unicode(length=250), nullable=True),
    sa.Column('target_dataset_name', sa.Unicode(length=250), nullable=True),
    sa.Column('target_field_name', sa.Unicode(length=250), nullable=True),
    sa.Column('distance', sa.Float(), nullable=True),
    sa.Column('type', sa.Unicode(length=250), nullable=True),
    sa.Column('project_id', sa.Integer(), nullable=True),
    sa.Column('creation_date', sa.DateTime(), nullable=True),
    sa.Column('update_date', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['source_dataset_id'], ['dataset.id'], ),
    sa.ForeignKeyConstraint(['source_field_id'], ['field_properties.id'], ),
    sa.ForeignKeyConstraint(['target_dataset_id'], ['dataset.id'], ),
    sa.ForeignKeyConstraint(['target_field_id'], ['field_properties.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('relationship')
    op.drop_index(op.f('ix_exported_spec_spec_id'), table_name='exported_spec')
    op.drop_index(op.f('ix_exported_spec_project_id'), table_name='exported_spec')
    op.drop_table('exported_spec')
    op.drop_index(op.f('ix_spec_project_id'), table_name='spec')
    op.drop_index(op.f('ix_spec_dataset_id'), table_name='spec')
    op.drop_table('spec')
    op.drop_table('project_preloaded_dataset_association')
    op.drop_index(op.f('ix_interaction_term_project_id'), table_name='interaction_term')
    op.drop_index(op.f('ix_interaction_term_dataset_id'), table_name='interaction_term')
    op.drop_table('interaction_term')
    op.drop_index(op.f('ix_field_properties_project_id'), table_name='field_properties')
    op.drop_index(op.f('ix_field_properties_dataset_id'), table_name='field_properties')
    op.drop_table('field_properties')
    op.drop_index(op.f('ix_exported_regression_project_id'), table_name='exported_regression')
    op.drop_table('exported_regression')
    op.drop_index(op.f('ix_exported_correlation_project_id'), table_name='exported_correlation')
    op.drop_table('exported_correlation')
    op.drop_index(op.f('ix_exported_comparison_project_id'), table_name='exported_comparison')
    op.drop_table('exported_comparison')
    op.drop_index(op.f('ix_exported_aggregation_project_id'), table_name='exported_aggregation')
    op.drop_table('exported_aggregation')
    op.drop_index(op.f('ix_dataset_properties_project_id'), table_name='dataset_properties')
    op.drop_index(op.f('ix_dataset_properties_dataset_id'), table_name='dataset_properties')
    op.drop_table('dataset_properties')
    op.drop_index(op.f('ix_regression_project_id'), table_name='regression')
    op.drop_table('regression')
    op.drop_index(op.f('ix_feedback_project_id'), table_name='feedback')
    op.drop_table('feedback')
    op.drop_index(op.f('ix_document_project_id'), table_name='document')
    op.drop_table('document')
    op.drop_index(op.f('ix_dataset_project_id'), table_name='dataset')
    op.drop_table('dataset')
    op.drop_index(op.f('ix_correlation_project_id'), table_name='correlation')
    op.drop_table('correlation')
    op.drop_index(op.f('ix_comparison_project_id'), table_name='comparison')
    op.drop_table('comparison')
    op.drop_index(op.f('ix_aggregation_project_id'), table_name='aggregation')
    op.drop_table('aggregation')
    op.drop_table('team_user_association')
    op.drop_table('team_admin_association')
    op.drop_index(op.f('ix_project_user_id'), table_name='project')
    op.drop_table('project')
    op.drop_table('user')
    op.drop_table('team')
    # ### end Alembic commands ###
